  main.cpp
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(43,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(47,1): warning C4312: “类型强制转换”: 从“unsigned int”转换到更大的“void *”
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(50,1): warning C4267: “初始化”: 从“size_t”转换到“unsigned int”，可能丢失数据
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(54,1): warning C4312: “类型强制转换”: 从“unsigned int”转换到更大的“void *”
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(62,1): warning C4267: “参数”: 从“size_t”转换到“GLsizei”，可能丢失数据
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(100,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(100,1): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(105,1): warning C4267: “参数”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility(268): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(852): message : 查看对正在编译的函数 模板 实例化“void std::_Construct_in_place<int,_Ty>(int &,_Ty &&) noexcept”的引用
          with
          [
              _Ty=unsigned __int64
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(839): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<unsigned __int64>(unsigned __int64 &&)”的引用
          with
          [
              _Ty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(845,13): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<unsigned __int64>(unsigned __int64 &&)”的引用
          with
          [
              _Ty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(925): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<unsigned __int64>(unsigned __int64 &&)”的引用
          with
          [
              _Ty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(927,14): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<unsigned __int64>(unsigned __int64 &&)”的引用
          with
          [
              _Ty=int
          ]
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(208,1): message : 查看对正在编译的函数 模板 实例化“void std::vector<int,std::allocator<int>>::emplace_back<unsigned __int64>(unsigned __int64 &&)”的引用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory(673): warning C4267: “初始化”: 从“size_t”转换到“_Objty”，可能丢失数据
          with
          [
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(875): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,unsigned __int64>(_Alloc &,_Objty *const ,unsigned __int64 &&)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(899,32): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,unsigned __int64>(_Alloc &,_Objty *const ,unsigned __int64 &&)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(839): message : 查看对正在编译的函数 模板 实例化“int *std::vector<int,std::allocator<int>>::_Emplace_reallocate<_Ty>(int *const ,_Ty &&)”的引用
          with
          [
              _Ty=unsigned __int64
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(848,9): message : 查看对正在编译的函数 模板 实例化“int *std::vector<int,std::allocator<int>>::_Emplace_reallocate<_Ty>(int *const ,_Ty &&)”的引用
          with
          [
              _Ty=unsigned __int64
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility(172): warning C4267: “初始化”: 从“size_t”转换到“_Ty2”，可能丢失数据
          with
          [
              _Ty2=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory(673): message : 查看对正在编译的函数 模板 实例化“std::pair<const std::string,int>::pair<std::string&,_Ty,0>(_Other1,_Other2 &&) noexcept(false)”的引用
          with
          [
              _Ty=unsigned __int64,
              _Other1=std::string &,
              _Other2=unsigned __int64
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory(680,47): message : 查看对正在编译的函数 模板 实例化“std::pair<const std::string,int>::pair<std::string&,_Ty,0>(_Other1,_Other2 &&) noexcept(false)”的引用
          with
          [
              _Ty=unsigned __int64,
              _Other1=std::string &,
              _Other2=unsigned __int64
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\list(584): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,std::string&,unsigned __int64>(_Alloc &,_Objty *const ,std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>,
              _Ty=std::pair<const std::string,int>,
              _Objty=std::pair<const std::string,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\list(586,34): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,std::string&,unsigned __int64>(_Alloc &,_Objty *const ,std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>,
              _Ty=std::pair<const std::string,int>,
              _Objty=std::pair<const std::string,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xhash(588): message : 查看对正在编译的函数 模板 实例化“std::_List_node_emplace_op2<std::allocator<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer>>>::_List_node_emplace_op2<std::string&,unsigned __int64>(_Alnode &,std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Alnode=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xhash(612,53): message : 查看对正在编译的函数 模板 实例化“std::_List_node_emplace_op2<std::allocator<std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer>>>::_List_node_emplace_op2<std::string&,unsigned __int64>(_Alnode &,std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Alloc=std::allocator<std::pair<const std::string,int>>,
              _Alnode=std::allocator<std::_List_node<std::pair<const std::string,int>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,int>>>::void_pointer>>
          ]
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(193,1): message : 查看对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,int,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::string&,unsigned __int64>(std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,int>>
          ]
C:\Users\talentstream\source\repos\opengl_meshoperations\opengl_project\shape.h(193,21): message : 查看对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,int,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::string&,unsigned __int64>(std::string &,unsigned __int64 &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,int>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,int>>
          ]
  opengl_project.vcxproj -> C:\Users\talentstream\source\repos\opengl_meshoperations\x64\Debug\opengl_project.exe
